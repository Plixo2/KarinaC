plugins {
    id 'java'
    id 'application'
}

group = 'org.karina.lang'
version = '0.3'

repositories {
    mavenCentral()
}

dependencies {
    //nullable annotations
    compileOnly 'org.jetbrains:annotations:23.0.0'

    //Json
    implementation 'com.google.code.gson:gson:2.11.0'

    //Antlr grammar
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.13.2'

    //lombok annotations
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    //cli parser
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.9.0'

    //guava
    implementation "com.google.guava:guava:33.4.0-jre"

    //asm
    implementation 'org.ow2.asm:asm:9.7'
    implementation 'org.ow2.asm:asm-commons:9.7'
    implementation 'org.ow2.asm:asm-util:9.7'
    implementation 'org.ow2.asm:asm-tree:9.7'

    //lsp
    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.23.1'

    //escaping
    implementation 'org.apache.commons:commons-text:1.13.0'


    //tests
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.4'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.4'

}

tasks.register('FAT-JAR', Jar) {
    manifest {
        attributes 'Main-Class': 'org.karina.lang.compiler.boot.Main'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/INDEX.LIST', 'META-INF/*.MF'

    with jar
}

/*tasks.register('LSP', Jar) {

    manifest {
        attributes 'Main-Class': 'org.karina.lang.lsp.Main'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/INDEX.LIST', 'META-INF/*.MF'

    with jar

    archiveFileName = 'karina-lsp.jar'
}*/

application {
    mainClass.set('org.karina.lang.compiler.Main')
}

tasks.register('KARINA-BASE', Jar) {

    archiveBaseName = 'karina-lang'

    from sourceSets.main.output
    include 'karina/lang/**'

    destinationDirectory = file("${projectDir}/src/main/resources")

    archiveFileName = 'karina_base.jar'

    doLast {
        println "Built karina.lang JAR: ${archiveFileName.get()}"
        println "Location: ${destinationDirectory.get()}/${archiveFileName.get()}"
    }
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '--enable-preview'
}

tasks.withType(Test).configureEach {
    jvmArgs += '--enable-preview'
}