
import java::lang::String valueOf
import karina::lang::Result { safeCall }
import karina::lang::Result { Ok, Err }
import java::util::function::Supplier
import java::lang::System out
import karina::lang::Option
import karina::lang::Option { Some, None }
import java::util::ArrayList
import java::util::List
import java::util::Arrays

import java::util::regex::Pattern

pub fn main(args: [string]) {
    let a = InStruct { myField: 5 }
    let b = a

    //println(a.map())
}

struct Other {}
struct ParseError {}

struct InStruct {
    myField: int

    fn getRule(self) -> Option<Other>?ParseError {
        Ok { _: None {}}
    }

    fn map(self) -> Option<List<Other>>?ParseError {
       return self.getRule().map(fn(node) node.map(fn(a) List::of(a)))
    }


}
