//support new data types
//support casting
//only static dispatching
//zero cost abstractions

//types
//u8, i8, u16, i16, u32, i32, u64, i64, f32, f64,
//bool, void,
//str
//ptr,

//all fields are final by default

import java.lang.ref.Cleaner

static cleaner: Cleaner = Cleaner.create()
@Super = {
    type: type { Object }
    invocation: expr {
        cleaner.register(self, fn() {
            free(pointer)
        })
        super(pointer, length, allocated)
    }
}
struct Buffer {
    pointer: ptr,
    length: u64,
    allocated: bool
}

native fn alloc(size: u64) -> Option<Buffer> {
    let pointer = std.alloc(size)
    if pointer == 0 {
        return Option.None {}
    } else {
        return Option.Some { _: Buffer { pointer: pointer, length: size, allocated } }
    }
}

native fn free(buffer: Buffer) {
    buffer.allocated = false
    std.free(buffer.pointer)
}
