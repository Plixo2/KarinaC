
import java::lang::String valueOf
import karina::lang::Result { safeCall }
import karina::lang::Result { Ok, Err }
import java::util::function::Supplier
import java::lang::System out
import karina::lang::Option
//import src.Main.Option { some, none }
import java::util::ArrayList
import java::util::List
import java::util::Arrays
import src::errors

import src::files

fn main() {
    let path = files.getPath("Hello").expect("a valid path")
    println(files.exists(path))
    files.loadFile(path)
    let null_val = Values.Null()
    let optionArrayInt = Option.newArray(Integer, 10)
    let optionArray = Option.newArray(10)
    let arrayInt = Values.newArray(Integer, 10, fn(_) Values.Null())
    let arrayId = Values.newArray(10, fn(a) a)
    let arrayIdIndirect = Values.newArray(10,  identity())
    let stringsFromIndex = Values.newArray(10, fn(index) String.valueOf(index))


   // let a: int = 1
   // let b: string = "Hello World"
   // let c: String = String.valueOf(a)
   // let d: String = valueOf(c)
   // let f: String = String.valueOf(1)

    out.println("Hello World")
}

fn get() -> ? {
    let indicesA = Arrays.asList([1, 2]).stream().map(fn(a) valueOf(a.intValue())).toList()

    for text: string in indicesA {
        if text.isEmpty() {
            continue
        }
        let firstChar = Character.toUpperCase(text.charAt(0))
        let rest = text.substring(1).toLowerCase()
        println('$firstChar$rest')
    }

    let map = java::util::HashMap<> {}

    //map.put("Hello", 10)

    map.forEach(fn(key, value) {
        let str: String = key
        let s: int = value;
        println('Key: $key Value: $value')
    })


    let list = ArrayList<Integer> {
        _: List.of()
    }
    list.stream()
    let _ = list.add(10)
    let _ = list.add(20)
    let c = []

    for a in list {
        let s: int = a
    }
    let indices = Arrays.asList([1, 2, 3, 4, 5, 6, 7, 8, 9]).stream().map(fn(a) valueOf(a)).toList()

    //let indices = Arrays.asList([1, 2]).stream(fn(a) valueOf(a.intValue())).toList()

    for a in indices {
        println(a)
    }

   // let _b: int = list.get(10)
   // let ww = _b

    let a = "Hello"
    let interpolated = 'Hello if $a'

    let s  = ObjectSome {
        \fn: "Hello"
    }
    let str: string = s.\fn
    str
}

fn test() -> bool {

    let box = fn(value: Integer) -> Integer { value }

    let s: Integer? = Option::Some { _: (Integer.valueOf(10)) } as Option<Integer>

    let s2: TestInterface<Integer, String> = Test { inner: box(10) }

    let i: int = if s is Option::Some some {
        some.value.intValue()
    } else is Option::None {
        -1000
    }


    let unbox_int: int = Integer.valueOf(10)
    let unbox_long: long = Long.valueOf(10)
    let unbox_double: double = Double.valueOf(10)
    let unbox_float: float = Float.valueOf(10)
    let unbox_bool: bool = Boolean.valueOf(false)

    let boxed_int: Integer = 10
    let boxed_long: Long = 10
    let boxed_double: Double = 10.0
    let boxed_float: Float = 10.0
    let boxed_bool: Boolean = false

    let any = Inf { }
    any.test()
    any.testTwo(any)
    let ret = any.ret()
    ret = Option.none()

    let testBox = Option.some(10)

    let WWW: int = 10.0 as _

    let a_ = <int>[]
    a_[boxed_int] = 1

    println("Hello World")
    let \let = "ok"

    let a: string = 'hello $a_ end'
    let b: string = 'hello$a end'
    let c: string = 'hello$a$b-end'
    let d: string = '$c '
    let e: string = '$d'
    let f: string = '$\let'
    let g: string = '\$let'

    a = if true {
        "Hello"
    } else {
        return false
    }


    let array_assign: [Integer] = [1, 2, 3]

    //box(10) == 10


    let asInt: int = array_assign[2] + 0 + array_assign[1]

    let customList: List<Boolean> = ArrayList{}

    any != a
}

struct Test<W> {
    inner: W

    impl TestInterface<W, String> {

    }
}

struct Inf<T> {

    fn test(self) {
        self
    }

    fn ret(self) -> Inf<T>? {
        Option::Some { value: self }
    }

    fn testTwo<W>(self, other: Inf<W>) {

    }

    fn st() -> int {
        10
    }

}

interface TestInterface<T, B> {

}

fn identity<T>() -> (fn(T) -> T impl java::util::function::Function<T,T>) {
    fn(t) t
}


//fn identity<T>() -> java.util.function.Function<T,T> {
//    fn(t) t
//}

struct ObjectSome {
    \fn: string
}

fn completePath<W>(s: W) {

}

struct ObjectToBase {
    element: int

    fn (self, value: string) {
        self.element = value.length()
        super<Object>()
    }

    fn (self, length: int) {
        self.element = length
    }
}


@Super = {
    type: type { ObjectToBase }
}
struct BasedObject {
    value: string

    fn (self, value: string) {
        let len = value.length()
        super<ObjectToBase>(len)
    }
    fn (self, value: string?) {
        super<ObjectToBase>(value.map(fn(v) v.length()).orElse(0))
    }


}

fn getAsAny<T>(t: T) -> ? = t

struct Other<W> {}

@Super = {
    type: type { Other<Integer> }
}
struct Inner {
    a: int
    b: src::main::Inner
    type: int

    fn function(self, _: int) {
        let initBasedObject = BasedObject {
            value: Option::Some { _: "Hello" }
        }
    }

    fn staticMethodReference() {

    }

    impl Interface
}

struct SimpleSupplier {
    value: int
    impl Supplier<Integer> {
        fn get(self) -> Integer {
            return Integer.valueOf(self.value)
        }
    }
}

interface Interface {
    fn function(self) -> bool
}

fn expect<T, E>(result: Result<T, E>) -> T {
    expect(result, "")
}

fn expect<T, E>(result: Result<T, E>, message: string) -> T {
    if result is Ok ok {
        ok.value
    } else is Err e {
        let suffix = if message.isEmpty() { "" } else { ': $message' }

        raise java::lang::RuntimeException {
            message: 'Could not unwrap Result$suffix',
            cause: Option.instanceOf(Throwable, e.error).nullable()
        }
    }
}
/*
Expr
Value
Type
Struct
Interface
Enum
string
Block
tokenStream
Any

macro println(m: Value<bool>, function: code) -> Expr {

    code! {
        if m {
            \code()
        }
    }

}

macro code(stream: TOKEN_STREAM) {
    import karina.lang.TokenStream
    let lexer = grammar! {
        STRUCT: 'struct' id '{' field* '}';
    }
    let node = grammar.STRUCT(stream)

    let fields: [FIELD] = []
    let functions: [FUNCTION] = []
    let interfaces: [INTERFACE_IMPL_BLOCK] = []
    return DEFINE_STRUCT("Hello", fields, functions, interfaces)



}

*/