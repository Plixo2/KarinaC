package org.karina.lang.compiler.logging;


import java.util.*;
import java.util.stream.Collectors;

/// Helper for finding suggestions for typos.
///
/// <b>GENERATED BY CHATGPT FOR SPEED</b>
public final class DidYouMean {

    private DidYouMean() {}

    /// Find the best suggestions for a target string from a set of available strings.
    /// @param limit the maximum number of suggestions to return
    public static List<String> suggestions(Set<String> available, String target, int limit) {
        if (limit <= 0 || available.isEmpty()) return List.of();
        final int targetLen = target.length();
        final char[] tChars = target.toCharArray();

        // Max-heap by distance, keep the worst on top so we can prune aggressively.
        record Entry(String s, int d) {}
        PriorityQueue<Entry> heap = new PriorityQueue<>(Comparator.<Entry>comparingInt(e -> e.d).reversed());

        // Reusable DP rows for the bounded Levenshtein
        int[] prev = new int[targetLen + 1];
        int[] curr = new int[targetLen + 1];

        for (String s : available) {
            // Lower bound by length difference
            int lenDiff = Math.abs(s.length() - targetLen);

            // Current threshold is the worst distance we are willing to accept
            int threshold = heap.size() < limit ? Integer.MAX_VALUE
                    : heap.peek().d; // worst in heap

            // If even the best possible distance cannot beat threshold, skip
            if (lenDiff > threshold) continue;

            int d = levenshteinBounded(s, tChars, threshold, prev, curr);
            if (heap.size() < limit) {
                heap.offer(new Entry(s, d));
            } else if (d < heap.peek().d) {
                heap.poll();
                heap.offer(new Entry(s, d));
            }
        }

        // Extract and sort ascending by distance
        List<Entry> entries = new ArrayList<>(heap);
        entries.sort(Comparator.comparingInt(e -> e.d));
        return entries.stream().map(e -> e.s).collect(Collectors.toList());
    }

    /// Bounded Levenshtein with early-abandon and two rolling rows.
    /// Returns threshold + 1 if it cannot beat the threshold.
    private static int levenshteinBounded(String x, char[] y, int threshold,
            int[] prev, int[] curr) {
        final int n = x.length();
        final int m = y.length;

        // Quick outs
        if (n == 0) return Math.min(m, threshold + 1);
        if (m == 0) return Math.min(n, threshold + 1);

        // Initialize first row
        for (int j = 0; j <= m; j++) prev[j] = j;

        int bestRowMin = Integer.MAX_VALUE;

        for (int i = 1; i <= n; i++) {
            curr[0] = i;
            int rowMin = curr[0];
            char xi = x.charAt(i - 1);

            // Optional banding: limit j range to [max(1, i - threshold), min(m, i + threshold)]
            // Only if threshold is finite
            int jStart = 1;
            int jEnd = m;
            if (threshold != Integer.MAX_VALUE) {
                jStart = Math.max(1, i - threshold);
                // Ensure left edge is initialized when we skip columns
                if (jStart > 1) curr[jStart - 1] = Math.min(curr[jStart - 2] + 1, prev[jStart - 1] + 1);
                jEnd = Math.min(m, i + threshold);
            }

            for (int j = jStart; j <= jEnd; j++) {
                int cost = (xi == y[j - 1]) ? 0 : 1;
                int del = prev[j] + 1;
                int ins = curr[j - 1] + 1;
                int sub = prev[j - 1] + cost;
                int v = Math.min(sub, Math.min(del, ins));
                curr[j] = v;
                if (v < rowMin) rowMin = v;
            }

            // Early abandon if this row cannot beat threshold
            if (rowMin > threshold) {
                return threshold + 1;
            }

            // swap rows
            int[] tmp = prev;
            prev = curr;
            curr = tmp;

            bestRowMin = Math.min(bestRowMin, rowMin);
        }

        int result = prev[m];
        // Respect the contract of returning threshold + 1 if above threshold
        if (result > threshold) return threshold + 1;
        return result;
    }


}
