


// Hello, World!
fn main(args: [string]) {
    let hello_function = createHelloFunction()

    print(hello_function(','))

    let my_object = Test::create()
    my_object.set("World!")

    let the_world = my_object.get()
    System.out.println(' $the_world')
}



struct Test {
    mut val: string

    fn create() -> Test {
        return Test { val: "" }
    }

    fn set(self, s: string) {
        self.val = s
    }

    fn get(self) -> string = self.val
}

fn createHelloFunction<T>() -> fn(T) -> string {
    let hello = {
        "HELLO"
            .chars()
            .mapToObj(fn(c) Character::toLowerCase(c as char))
            .map(fn(c) String::valueOf(c))
            .collect(
                fn() StringBuilder {},
                fn(sb, s) sb.append(s),
                fn(l, r) l.append(r)
            ).toString()
    }
    let first = hello.substring(0, 1).toUpperCase()
    let rest = hello.substring(1)
    hello = '$first$rest'

    fn(add) {
        '$hello$add'
    }
}
